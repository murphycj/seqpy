"""
Create the R script to perform differential expression comparing given sets of genes

folder: folder to save results to
samples: lists of lists of samples to compare against each other
       Should contian at least two lists
groupnames: list of the group names
max_zero_count_fraction: remove genes with more than this amount of samples
                       with zero read counts
"""

import subprocess
import argparse
import os
import pandas

def main(args):
    folder = os.path.abspath(args.outdir)
    name = os.path.split(folder)[1]

    phenotypes = args.phenotypes.split(',')

    assert len(phenotypes)==2,"provide only two phenotypes"

    group1 = ','.join(map(lambda x: '\"' + str(x) + '\"', args.group1.split(',')))
    group2 = ','.join(map(lambda x: '\"' + str(x) + '\"', args.group2.split(',')))

    rscript = name + '.R'
    rlog = name + '.log'
    filehandle = open(rscript, 'w')

    filehandle.write('#\n')
    filehandle.write('# Comparison ' + name + '\n')
    filehandle.write('# This code was autogenerated\n')
    filehandle.write('#\n')
    filehandle.write('plot_and_save_results <- function(results, name) {\n')
    filehandle.write('\t#\n')
    filehandle.write('\t# This function just plots some diagnostic plots and saves the results\n')
    filehandle.write('\t#\n')
    filehandle.write('\tdd = results[with(results,order(padj)),]\n')
    filehandle.write('\twrite.csv(dd,paste(name,\"_results.csv\",sep=\"\"))\n')

    filehandle.write('\tpdf(paste(name,\"-pvalue-hist.pdf\",sep=\"\"))\n')
    filehandle.write('\thist(res$pvalue, breaks=20, col=\"grey\")\n')
    filehandle.write('\tdev.off()\n')

    filehandle.write('\tpdf(paste(name,\"-padj-hist.pdf\",sep=\"\"))\n')
    filehandle.write('\thist(res$padj, breaks=20, col=\"grey\")\n')
    filehandle.write('\tdev.off()\n')

    filehandle.write('\tpdf(paste(name,\"-MA-plot.pdf\",sep=\"\"))\n')
    filehandle.write('\tplotMA(results)\n')
    filehandle.write('\tdev.off()\n')

    filehandle.write('}\n\n')

    filehandle.write('library(\"DESeq2\")\n')
    filehandle.write('library(\"RColorBrewer\")\n')
    filehandle.write('library(\"gplots\")\n')
    filehandle.write('library(\"genefilter\")\n\n')

    filehandle.write('data <- read.csv(\"' + os.path.abspath(args.counts) + '\",row.names=1, check.names=FALSE)\n')

    filehandle.write('data2 <- data[,c(' + group1 + ',' + group2 + ')]\n')
    filehandle.write('data2 <- data2[rowSums(data2)>' + str(args.mincount) + ',]\n')
    filehandle.write(
        'coldata <- data.frame(treatment=factor(c(' + \
        'rep(\"' + phenotypes[1] + '\",length(c(' + group1 + '))),' + \
        'rep(\"' + phenotypes[0] + '\",length(c(' + group2 + ')))),' + \
        'levels=c(\"' + phenotypes[1] +'\",\"' + phenotypes[0] + '\")), ' + \
        'row.names=colnames(data2))\n'
    )
    filehandle.write('countTable <- DESeqDataSetFromMatrix(countData=data2,colData=coldata,design=~treatment)\n')
    filehandle.write('result <- DESeq(countTable)\n')
    filehandle.write('res <- results(result)\n')
    filehandle.write('plot_and_save_results(res, \"' + name + '\")\n\n')

    filehandle.close()

    cmd = ['Rscript',rscript]

    subprocess.call(cmd, stdout=open(rlog, "w"), stderr=open("/dev/null"))


parser = argparse.ArgumentParser(description='Creates GSEA scripts to run')
parser.add_argument(
    '--counts',
    type=str,
    help='csv file containing RNA-seq count (using human gene symbols)',
    required=True
)
parser.add_argument(
    '--mincount',
    type=int,
    help='Minimum count (default 1)',
    required=False,
    default=1
)
parser.add_argument(
    '--group1',
    type=str,
    help='Comma separated group 1 samples',
    required=True
)
parser.add_argument(
    '--group2',
    type=str,
    help='Comma separated group 2 samples',
    required=True
)
parser.add_argument(
    '--phenotypes',
    type=str,
    help='Comma separated name for the groups/phenotype (e.g. WT,MUT), same order and group1 and group2',
    required=True
)
parser.add_argument(
    '--outdir',
    type=str,
    help='Output directory',
    required=True
)
args = parser.parse_args()

main(args=args)
